<!DOCTYPE html>
<html>
<head>
  <meta name="author" content="David Strauß">
  <meta name="author" content="Mathias Paumgarten">
  <meta name="author" content="Eberhard Gräther">
  
  <title>Marble Run</title>

  <%= stylesheet_link_tag :all %>
  <%= javascript_include_tag :defaults %>
  <%= csrf_meta_tag %>

</head>

<body>

  <noscript>You're chillin' in the wrong turf, bro!</noscript>

  <table>
    <tr>
      <td id="sidebar">

        <header>
            <h1>Marble Run</h1>
        </header>

        <a id="modeSwitch">Build Mode / View Mode</a>

        <div id="lengthMeter">
          0000567
        </div>

        <div id="brickMeterHolder">
          <canvas id="brickMeterCanvas"></canvas>
        </div>

        <div id="lastTrackHolder">
          
        </div>
        
      </td>

      <td id="content">
        
        <div id="editorControlsTop" class="editorsControls controlsTop toggleElement">

          <a id="runButton" class="editorButton">Run</a>
          <a id="helpButton" class="editorButton">Help</a>
          <a id="clearButton" class="editorButton">Clear</a>

        </div>

        <div id="showroomControlsTop" class="editorsControls controlsTop toggleElement">
          <a id="showButton" class="editorButton">Run</a>
        </div>
        
        <div id="editorControlsBottom" class="editorsControls controlsBottom toggleElement">
          
          <div id="lengthDisplay">
            0000
          </div>
          
          <form>
            <input id="userName" type="text" value="YOUR NAME" />
            <input id="trackName" type="text" value="TRACK NAME" />
          </form>
          
          <a id="publishButton" class="publishButton activePublish">Publish</a>  
          <div id="publishButtonWarning">
            You can't publish until the ball reaches the exit!
          </div>  

        </div>

        <div id="showroomDetail">
          <h3>Superstar</h3>
        </div>

        <div id="showroomControlsBottom" class="editorsControls controlsBottom toggleElement">

          <a id="nextButton" class="editorButton">Next</a>
          <a id="previousButton" class="editorButton">Previous</a>        
          <a id="repeatButton" class="editorButton">Repeat</a>

        </div>
        
        <div id="editorToolboxTop" class="toggleElement">
        
          <div id="basicBricks">Basic Bricks</div>
          <div id="specialBricks">Special Bricks</div>  
        
        </div>
        
        <div id="editorToolboxBottom" class="toggleElement">
        
          <a id="twitterButton" class="editorButton">Twitter</a>
          <a id="facebookButton" class="editorButton">Facebook</a>
        
        </div>

        <div class="editor" id="editor">

            <canvas id="mainCanvas"></canvas>
            <canvas id="bufferCanvas"></canvas>
            <canvas id="imageCanvas"></canvas>

        </div>

        <script>

          var basePath = "http://localhost:3000";
          var currentMode = "build";
          var overviewSort = "alphabetic";

          var canvasContent, meter;
          var editorPosition = $('editor').cumulativeOffset($('editor'));

          var mainCanvas = document.getElementById("mainCanvas"),
              bufferCanvas = document.getElementById("bufferCanvas"),
              imageCanvas = document.getElementById("imageCanvas"),
              meterCanvas = document.getElementById("brickMeterCanvas");
          
          var toggleElements = [
            "editorControlsTop", 
            "editorControlsBottom",
            "editorToolboxTop",
            "editorToolboxBottom",
            "showroomControlsTop",
            "showroomControlsBottom",
            "showroomDetail"
          ];
 
          mainCanvas.onselectstart = function() {return false};
          bufferCanvas.onselectstart = function() {return false};
          meterCanvas.onselectstart = function() {return false};

          imageCanvas.style.visibility = 'hidden';

          var initializeHTMLInterface = function() {

            var myScope = this;

            $('modeSwitch').observe('click', function(event) {

              if (myScope.currentMode == "view") {

                myScope.setSwitchMode("build");
                loadContent("/tracks/new");

              } else {
                
                myScope.setSwitchMode("view");

              }
            });

          }();

          var setSwitchMode = function(mode) {
            if (mode == currentMode){
              return;
            }

            currentMode = mode;
            $('modeSwitch').toggleClassName("view");
          }

          var parseResponse = function(jsonContent, setPath) {

            var content = jsonContent.responseJSON;
            var visibleList = [];
            
            if (canvasContent) {
              canvasContent.destroy();
              canvasContent = null;
            }

            if (content.mode == "build") {

              if (setPath) {
                setURL("/tracks/new");
              }

              canvasContent = new Editor(mainCanvas, bufferCanvas, imageCanvas);
              canvasContent.x = editorPosition.left;
              canvasContent.y = editorPosition.top;

              canvasContent.startRender();

              visibleList = ["editorControlsTop", "editorControlsBottom", "editorToolboxTop", "editorToolboxBottom"];
              $('editor').setStyle({height: "560px"});
              setSwitchMode("build");

            } else if (content.mode == "show") {

              if (setPath) {
                setURL("/tracks/" + content.track.id);
              }

              canvasContent = new Showroom(mainCanvas, bufferCanvas);
              canvasContent.x = editorPosition.left;
              canvasContent.y = editorPosition.top;

              canvasContent.parseTrack(content.track);

              canvasContent.startRender();

              visibleList = ["showroomControlsTop", "showroomControlsBottom", "showroomDetail"];
              $('editor').setStyle({height: "520px"});
              setSwitchMode("view");

            }

            /* --- set visibilty of html elemnts --- */
            for (var i = 0; i < toggleElements.length; i++) {

              if (visibleList.indexOf(toggleElements[i]) > -1) {

                $(toggleElements[i]).setStyle({visibility: "visible"});
                
              } else {

                $(toggleElements[i]).setStyle({visibility: "hidden"});

              }
            }

          };

          var loadContent = function(path) {
            
            setURL(path);

            new Ajax.Request(path, {
              method: 'get',
              requestHeaders: {Accept: 'application/json'},
              onSuccess: parseResponse,
              onFailure: function() {
                console.error("JSON Content Request failed! Refactor Me!");
              }
            });

          };

          var setURL = function(path) {

            var pathArray = path.split("/");
            var site = pathArray.pop();
            var splitPath = pathArray.join("/") + "/";

            if (history && history.pushState) {

              history.pushState({}, splitPath, site);

            } else {

              //window.location = basePath + path;

            } 
          }
          
          window.onload = function() {
            loadContent(window.location.pathname);

            meter = new Meter(meterCanvas);

            Pattern.context = meterCanvas.getContext("2d");
            Pattern.loadPattern([
              {name: "meterBackground", path: "../images/sidebar-meter-background.png"},
              {name: "meterForeground", path: "../images/sidebar-meter-foreground.png"},
              {name: "meterPointer", path: "../images/sidebar-meter-pointer.png"}
            ]);

            Pattern.onload = function() {
              meter.setRotation(.0);
            };

            new Ajax.PeriodicalUpdater('', '/tracks/info', {
              method: 'get',
              frequency: 1,
              decay: 2,
              onSuccess: function(transport) {
                response = JSON.parse(transport.responseText);
                meter.setRotation(response.percentage);

                var length = (parseInt(response.total_length * 10, 10).toString());

                while(length.length < 7) {
                  length = "0" + length;
                }

                $('lengthMeter').update(length);
              },
              onFailure: function(transport) {
                console.error("JSON Content Request failed! Refactor Me!");
              }
            });
          };

        </script>

        <%= yield %>

      </td>
    </tr>
  </table>

  <% ActionView::Helpers::AssetTagHelper.register_javascript_expansion :marblerun => ["prototype", "box2d-a/box2d", "marblerun/utilities/rectangle", "marblerun/utilities/utilities", "marblerun/utilities/pattern", "marblerun/utilities/event", "marblerun/utilities/eventengine", "marblerun/utilities/displayobject", "marblerun/bricks/brick", "marblerun/bricks/kicker", "marblerun/bricks/ramp", "marblerun/bricks/curve", "marblerun/bricks/line", "marblerun/bricks/exit", "marblerun/bricks/spring", "marblerun/bricks/boost", "marblerun/bricks/ball", "marblerun/bricks/breaker", "marblerun/grid", "marblerun/toolbox", "marblerun/field", "marblerun/renderer", "marblerun/editor", "marblerun/showroom", "marblerun/meter"] %>

  <%= javascript_include_tag :marblerun %>
</body>

</html>